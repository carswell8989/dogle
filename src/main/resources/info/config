#############################################
최초 환경설정 2019.11.05.

1.본 프로젝트는 스프링부트 + vue js를 이용하였습니다.
2.개발을 위해 npm을 설치해주세요. https://nodejs.org/ko/download/
3.프로젝트 경로는 C드라이브/project/dogle 입니다.
4.vue로 시작하려면, 프로젝트 frontend 폴더 경로에서 cmd창을 여신 후, npm run dev 명령어 입력 하시면 됩니다.
5.프로젝트 실행은 DogleApplcation 파일을 run 하시면 됩니다. 기본 포트는 9091 으로 설정하였습니다.
6.DB는 로컬 mysql 에 root/root 계정으로 dogle 스키마를 생성해주세요.  create schema dogle;


#############################################
2019.11.18 프론트엔드 환경설정 - vue router
1. npm install vue-router --save
2. 각 화면의 경로설정은 /dogle/frontend/src/router/index.js 에서 설정합니다.
3. 라우팅에 따라 렌더링할 컴포넌트 설정 객체를 정의합니다.
4. routes는 경로와 컴포넌트로 이루어진 컬렉션입니다. 이 맵을 보고 라우터가 경로에 따라 그에 맞는 컴포너트를 렌더링합니다. 정의한 순서대로 경로를 매칭하기 때문에 순서가 중요합니다.
5. routes 속성에 정의하는 컬렉션에는 children 속성이 있습니다. 이는 특정 라우팅의 하위 경로가 변경됨에 따라 하위 컴포넌트로 변경할수 있는 기능입니다. -서브메뉴
	
#############################################
2019.11.19 프론트엔드 환경설정 - Axios
1. npm install axios
2. Vue에서 가장 많이 사용하는 HTTP 통신 라이브러리입니다. Promise 기반이라 코드를 간결하게 작성하기 용이합니다.
3. 파일경로 : /dogle/frontend/src/views/backend-api.js


#############################################	
2019.11.21 프론트엔드 환경설정 - vuex 
1. npm install vuex --save
2. vuex란 vue.js의 상태관리를 위한 패턴이자 라이브러리입니다. 
3. 상태관리(state management)가 필요한 이유는 컴포넌트 기반 프레임워크에서 컴포넌트 간의 통신이나 데이터 전달을 유기적으로 관리하기 위해서 사용합니다. 모든 데이터 통신 (state) 을 한 곳에서 중앙 집중식으로 관리합니다.
4. 상태관리 구성요소는 크게 3가지가 있습니다.
	example
	----------------------------------------
		new Vue({
		  // state
		  data () {
		    return {
		      count: 0
		    }
		  },
		  // view
		  template: `
		    <div>{{ count }}</div>
		  `,
		  // actions
		  methods: {
		    increment () {
		      this.count++
		    }
		  }
		})
	-----------------------------------------
	- state: 컴포넌트 간 공유될 data
	- view: 데이터가 표현될 template
	- actions: 사용자의 입력에 따라 반응할 methods 
	
5. Vuex를 등록하는 파일은 관례에 따라 store.js로 지정합니다. =>(/dogle/frontend/src/store.js)
6. Vue App이 등록된 main.js로 넘어가서 store.js를 불러와 등록하면 됩니다. =>(/dogle/frontend/src/main.js)

#############################################	
2019.12.06 프론트엔드 환경설정 - eslint
1. VSCODE 설치
https://code.visualstudio.com/

2. GIT설치
https://git-scm.com/

3. ESLint 플러그인 설치
마켓플레이스에서 ESLint를 검색해서 플러그인을 설치한다.

4. VS code 설정
.vscode 폴더에 settings.json 파일 추가하고 아래와 같이 편집한다.
{
	"eslint.validate": [
    {"language": "vue", "autoFix": true}, //vue 체크
    {"language": "javascript", "autoFix": true}, //자바스크립트 체크
    {"language": "html", "autoFix": true}, //HTML 체크 <div></div> -> <div />
],
"eslint.autoFixOnSave": true,
"eslint.alwaysShowStatus": true,
}


#############################################
2019.12.06 프론트엔드 환경설정 - vee-validate 

*참고사이트 : https://logaretm.github.io/vee-validate/
1. 설치
npm install vee-validate --save

	
		



























